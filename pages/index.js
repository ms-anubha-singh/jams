import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useEffect, useState } from 'react';

import fire from '../config/firebaseConfig';

import {pickBy} from 'lodash'

export default function Home () {
  const [name, setName] = useState();
  const [question, setQuestion] = useState();
  const [isDone, setIsDone] = useState(false);
  useEffect(() => {
    fetch( '/api/hello' )
      .then( res => res.json() )
      .then( data => {
        setName( data.name );
      } );
  }, [] );

  useEffect( () => {
    loadQuestion()
  }, []);

  const loadQuestion = () => {
    const db = fire.firestore();
    db.collection("jams").get().then((querySnapshot) => {
      querySnapshot.forEach((doc) => {
        let jam = doc.data();
        jam.statements = {}
        const statementsPromise = db.collection("jams")
          .doc(doc.id)
          .collection("statements").get().then(query => {
            query.forEach(statement => {
              const statement_id = statement.id
              jam.statements[statement_id] = statement.data()
            })
            return jam;
          });

        const allVotes = []
        const votesPromise = db.collection("participants")
          .doc('BlNS4ZNBIJhEt1GJqEvm')
          .collection("votes")
          .get()
          .then(query => {
            query.forEach( vote => allVotes.push(vote.data().statementId));
            return allVotes;
          })

        Promise.all([statementsPromise, votesPromise])
          .then(([jam, votes]) => {
            const unansweredQs = pickBy(jam.statements, (value, key) => !votes.includes(key))

            const keys = Object.keys(unansweredQs);
            if (!keys.length) {
              setIsDone(true)
              return;
            }

            const randomKey = keys[keys.length * Math.random() << 0]
            const randomQ = unansweredQs[randomKey];
            randomQ.key = randomKey

            setQuestion(randomQ)
          });
      });
    });
  }

  const sendRequest = (vote) => {
    const db = fire.firestore();
    db.collection("participants").doc("BlNS4ZNBIJhEt1GJqEvm").collection("votes").add({
      jamId: "6y4qC5HoThwkMKJiBrLn",
      statementId: question.key,
      vote: vote ? 1 : -1,
      createdAt: fire.firestore.Timestamp.now()
    })
    .then(() => {
        console.log("Document successfully written!");
        loadQuestion()
    })
    .catch((error) => {
        console.error("Error writing document: ", error);
    });
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          {!isDone ? question ? question.text : 'Loading...' : 'All done'}
        </h1>

        <button onClick={() => sendRequest(true)}>Agree</button>
        <button onClick={() => sendRequest(false)}>Disagree</button>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/master/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
